// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Nobel2;
//
//    var laureateDetails = LaureateDetails.FromJson(jsonString);

namespace NobelLaureateDetails
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LaureateDetails
    {
        [JsonProperty("laureates")]
        public Laureate[] Laureates { get; set; }
    }

    public partial class Laureate
    {
        [Required]
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }

        [JsonProperty("born")]
        public string Born { get; set; }

        [JsonProperty("died")]
        public string Died { get; set; }

        [JsonProperty("bornCountry")]
        public string BornCountry { get; set; }

        [JsonProperty("bornCountryCode")]
        public string BornCountryCode { get; set; }

        [JsonProperty("bornCity")]
        public string BornCity { get; set; }

        [JsonProperty("diedCountry", NullValueHandling = NullValueHandling.Ignore)]
        public string DiedCountry { get; set; }

        [JsonProperty("diedCountryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string DiedCountryCode { get; set; }

        [JsonProperty("diedCity", NullValueHandling = NullValueHandling.Ignore)]
        public string DiedCity { get; set; }

        [JsonProperty("gender")]
        public string Gender { get; set; }

        [JsonProperty("prizes")]
        public Prize[] Prizes { get; set; }
    }

    public partial class Prize
    {
        [JsonProperty("year")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Year { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("share")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Share { get; set; }

        [JsonProperty("motivation")]
        public string Motivation { get; set; }

        [JsonProperty("affiliations")]
        public AffiliationElement[] Affiliations { get; set; }

        [JsonProperty("overallMotivation", NullValueHandling = NullValueHandling.Ignore)]
        public string OverallMotivation { get; set; }
    }

    public partial class AffiliationClass
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }
    }



    public enum Category { Chemistry, Economics, Literature, Medicine, Peace, Physics };

    public partial struct AffiliationElement
    {
        public AffiliationClass AffiliationClass;
        //public object[] AnythingArray;

        public static implicit operator AffiliationElement(AffiliationClass AffiliationClass) => new AffiliationElement { AffiliationClass = AffiliationClass };
        //public static implicit operator AffiliationElement(object[] AnythingArray) => new AffiliationElement { AnythingArray = AnythingArray };
    }

    public partial class LaureateDetails
    {
        public static LaureateDetails FromJson(string json) => JsonConvert.DeserializeObject<LaureateDetails>(json, NobelLaureateDetails.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LaureateDetails self) => JsonConvert.SerializeObject(self, NobelLaureateDetails.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AffiliationElementConverter.Singleton,
                CategoryConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class AffiliationElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AffiliationElement) || t == typeof(AffiliationElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var objectValue = serializer.Deserialize<AffiliationClass>(reader);
            return new AffiliationElement { AffiliationClass = objectValue };
            
            throw new Exception("Cannot unmarshal type AffiliationElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AffiliationElement)untypedValue;
            if (value.AffiliationClass != null)
            {
                serializer.Serialize(writer, value.AffiliationClass);
                return;
            }
            throw new Exception("Cannot marshal type AffiliationElement");
        }

        public static readonly AffiliationElementConverter Singleton = new AffiliationElementConverter();
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "chemistry":
                    return Category.Chemistry;
                case "economics":
                    return Category.Economics;
                case "literature":
                    return Category.Literature;
                case "medicine":
                    return Category.Medicine;
                case "peace":
                    return Category.Peace;
                case "physics":
                    return Category.Physics;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            switch (value)
            {
                case Category.Chemistry:
                    serializer.Serialize(writer, "chemistry");
                    return;
                case Category.Economics:
                    serializer.Serialize(writer, "economics");
                    return;
                case Category.Literature:
                    serializer.Serialize(writer, "literature");
                    return;
                case Category.Medicine:
                    serializer.Serialize(writer, "medicine");
                    return;
                case Category.Peace:
                    serializer.Serialize(writer, "peace");
                    return;
                case Category.Physics:
                    serializer.Serialize(writer, "physics");
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }
}
